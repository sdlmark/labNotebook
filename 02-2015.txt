20-02-2015
==========
TODAY:
- set up git lab notebook
- set up script repository on GitHub
- learned how to generate SSH keys!
- wrote autobam1.py to automate conversion of SAM to BAM using samtools
- began running autobam1.py on AF16/starAF16/alignsAF16/ @ 17:07

NEXT:
- check that bam files are OK (and that autobam1.py is OK)
- if OK, try to run HTSeq on the bam files
	- first don't forget to sort them (can I pipe it?)
- make a list of commands and put them up on GitHub


21-02-2015
==========
TODAY:
- generated ssh key for MBA, added key to GitHub
- created a file "commandline.txt" to store commands used
- pushed commandline.txt to scripts repository on GitHub
- checked bam files converted yesterday-->looks good!

NEXT: 
- sort bam files (using bash?) by name (-no)
- do test run of HTSeq on one bam file; look at count table
- ask Wei about generating err files
- keep updating commandline.txt
- put useable scripts up on GitHub 

FUTURE:
- ask Wei to look at some of my auto scripts 


23-02-2015
==========
TODAY:
- learned about stdout: what prints to the screen
	> filename.txt == 1>logfile.log
	- i.e. the "1" is implied for most commands
- learned about error log file: 2>errorname.err
	- saves error messages to file
- tried to run samtools sort:
	- don't use -o option unless stdout is desired
- ran samtools sort again; found proper command!
	$ samtools sort -n AF14-1.Aligned.bam AF14-1.sorted 2>AF14-1.sorting.err
- starting to understand more about command line
	- ex. what can be piped and what can't
- running HTSeq on AF14-1.sorted.bam (17:40S):
	htseq-count
	--format=bam
	--type=exon
	--idattr=Parent
	--mode=intersection-nonempty
	AF14-1.sorted.bam
	~/c_briggsae.PRHNA10731.WS246.annotations.gff3
	> AF14-1.count.test
	2> AF14-1.count.err
- updated commandline.txt with working samtools commands

NEXT:
- check results of HTSeq run on AF14-1.sorted.bam
- tweak parameters (ex. try --type=mRNA instead)
- research DFE, log-normal distribution
- do bash scripting tutorial-->should help automation of command line tasks

FUTURE:
- assertions in python


24-02-2015
==========
TODAY:
- checked HTSeq AF14-1.count.test:
	- looks the same as the non-sorted attempt?...
- look at count files in R?
- tinker with HTSeq parameters; try to understand annotation:
	--stranded=reverse
	--format=bam
	--type=exon
	--idattr=Parent
	--mode=intersection-nonempty
	AF14-1.sorted.bam
	~/c_briggsae.PRHNA10731.WS246.annotations.gff3
	> AF14-1.count.test
	2> AF14-1.count.err
	**these parameters seem to work! hooray!**
- do bash script tutorial
	- when defining variables, don't leave a space around "="
	- set variables:
		- $0 = script
		- $1-$9 = arguments provided in command
		- set commands as variables within backticks (`)
- redoing HTSeq with WormBase exons only .gff3 [16:20S]
	$ htseq-count
	--format=bam
	--stranded=yes
	--mode=intersection-nonempty
	--idattr=Parent
	--type=exon
	AF14-1.sorted.bam
	> AF14-1.countWB.test
	2> AF14-1.countWB.err
	** these parameters are worse :(**
- redoing HTSeq with WormBase exons only .gff3 [16:54S]
	$ htseq-count
	--format=bam
	--stranded=yes
	--mode=intersection-nonempty
	--idattr=ID
	--type=CDS
	AF14-1.sorted.bam
	> AF14-1.countWBcds.test
	2> AF14-1.countWBcds.err
	** still quite low... new strategy required!**
	
MEETING:
- talked about HTSeq stuff; why so many genes with 0 reads?
	- noticed "history" annotations-->problem
	- try $2=="WormBase" instead?
	- keep $3=="exon" (exon includes UTRs)
- make filtered .gff3 file

NEXT:
- run autobam1.py on other folders/write a bash script for the same thing
- write a bash script for automating HTSeq with optimal parameters (& homemade .gff3?)
- figure out why so many 0 read counts!
- try another homemade gff that just lacks "history"
- read up on functional descriptions of annotations on wormbase.org


25-02-2015
==========
TODAY:
- Emily's seminar-->associating SNPs with eQTLs
- research strandedness:
	- sense = mRNA transcript that matches a DNA sequence 
		- it originates from the opposite DNA strand
	- antisense = mRNA transcript that is complementary to a DNA sequence
		- it originates from the same DNA strand
	- so: if transcripts match the DNA, they come from the opposite strand
		- i.e. the gene is on the opposite strand
	- if RNA-seq is not stranded:
		- both sense and antisense transcripts will map to the same
		  location in the genome
	- if RNA-seq is stranded:
		- antisense transcripts will map to one strand and sense
		  transcripts will map to the other
	- why bother?
		- identify antisense transcripts
		- important for small RNAs (ex mature miRNA comes from one
		  arm)
		- info about overlapping genes (ex. starts on one strand then
		  starts on opposite strand)

NEXT:
- figure out the 0 count problem
- write bash scripts to automate (see 24-02-2015)
